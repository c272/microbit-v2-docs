<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on micro:bit v2 Documentation</title><link>https://microbit.c272.org/guides/</link><description>Recent content in Guides on micro:bit v2 Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="https://microbit.c272.org/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>'Hello World' with micro:bit v2</title><link>https://microbit.c272.org/guides/first-microbit-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/first-microbit-project/</guid><description>Now that you&amp;rsquo;ve installed the micro:bit v2 development environment, we can get started on programming a simple micro:bit project. First of all, we should initialise a blank project in a new directory. Let&amp;rsquo;s call it &amp;lsquo;microbit-first-project&amp;rsquo;. This guide assumes the use of micro-tools to manage building and initialising projects outside of the samples directory. If you are not using micro-tools, simply create your project files from within the microbit-v2-samples/source folder.</description></item><item><title>Using the micro:bit file system</title><link>https://microbit.c272.org/guides/using-the-filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/using-the-filesystem/</guid><description>New to the micro:bit v2 API, MicroBitFileSystem is a component which allows you to interact with a POSIX-like interface to store &amp;ldquo;files&amp;rdquo; on the micro:bit v2&amp;rsquo;s flash memory, rather than using the older key-value file storage system from micro:bit v1, MicroBitStorage. This guide will discuss how to set up and use a filesystem created through this component, and some example usage for common use cases.
Be very careful if using this API in tandem with the old MicroBitStorage API.</description></item><item><title>Logging with MicroBitLog</title><link>https://microbit.c272.org/guides/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/logging/</guid><description>If your use case for the micro:bit v2 includes logging data from sensors and other event sources, then you may be tempted to use the MicroBitFileSystem or KeyValueStorage to store your log data for later retrieval from the micro:bit file system. However, new to micro:bit v2, there is an API designed specifically for logging: MicroBitLog. Use of this API allows you to store data in a table-like format, containing rows of field-value pairs, providing a handy web interface to view your results data by loading your micro:bit v2&amp;rsquo;s file system from a PC.</description></item><item><title>Interacting over serial I/O</title><link>https://microbit.c272.org/guides/serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/serial/</guid><description>The micro:bit API allows you to transfer information out from the board to external machines (and other micro:bits!) in various ways. One of these is through the use of serial transmission, which has been a feature of the API since micro:bit v1, with only a few very minor breaking name changes carrying over into the v2 API. This guide will discuss how to set up a serial connection over the USB UART port on the micro:bit, and communicate with an external machine (for the purposes of this exercise, this will be a Linux computer).</description></item></channel></rss>