<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Setup on micro:bit v2 Documentation</title><link>https://microbit.c272.org/setup/</link><description>Recent content in Setup on micro:bit v2 Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="https://microbit.c272.org/setup/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing on Linux</title><link>https://microbit.c272.org/setup/linux-install-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/linux-install-guide/</guid><description>To get started with micro:bit v2, depending on your distibution of Linux, there are different options available. If you are on a Debian-based distribution or Void Linux (i.e, your distribution has either the apt or xbps package manager), then you can use the micro-tools script-assisted setup method, which will allow you to set up the SDK for building and creating micro:bit v2 projects with a single command. If you are on another distribution, then you will have to follow the manual method for setting up the build environment.</description></item><item><title>Installing on MacOS</title><link>https://microbit.c272.org/setup/mac-install-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/mac-install-guide/</guid><description>To get started with micro:bit v2 on MacOS, you can either use the micro-tools script-assisted setup method, which will allow you to set up the SDK for building and creating micro:bit v2 projects with a single command, or you can do everything manually by installing the required dependencies and cloning the samples repository by hand.
Script-assisted Setup For automatic setup, we will use microinstall.sh from the c272/micro-tools repository. This repository contains many useful tools for building and configuring build environments for micro:bit v2 projects, and is a companion project to this documentation.</description></item><item><title>Installing on Windows</title><link>https://microbit.c272.org/setup/windows-install-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/windows-install-guide/</guid><description>There are several available options for installing on Windows-based machines, some of which are easier to work with than others. Those methods are:
Native install Installation through MSYS2/MinGW Installation through Windows Subsystem for Linux (WSL2) Native install comes with the benefit of not requiring any additional abstraction layers or components on the system, however comes with the downside of not being compatible with all the Linux-oriented tooling made available by micro-tools.</description></item><item><title>Configuring &amp; Using micro-tools</title><link>https://microbit.c272.org/setup/using-micro-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/using-micro-tools/</guid><description>If you installed the micro:bit v2 build environment through a method other than the script-assisted setup, you will not have had micro-tools installed in the setup process. In addition, the default micro:bit v2 build environment only permits you to build code from within the sample repository&amp;rsquo;s &amp;ldquo;source&amp;rdquo; directory, which can be limiting when programming multiple micro:bit projects at once. With these things in mind, micro-tools allows you to remove these restrictions, as well as adding a suite of useful utilities for working with micro:bit v2 projects.</description></item><item><title>Setting up a Debug Environment</title><link>https://microbit.c272.org/setup/debug-setup-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/debug-setup-guide/</guid><description>The micro:bit v2 supports debugging over its provided programming port, allowing you to view the contents of memory and control the stepping of execution at runtime. To access this functionality, we will use Visual Studio Code with the marus25.cortex-debug extension, along with one of OpenOCD or pyOCD to provide debugging interaction with the micro:bit v2&amp;rsquo;s Cortex M0 (nRF51822) CPU. The selection of these should largely not matter, as they both provide sufficient debugging support for the extension that will interact with them.</description></item></channel></rss>