<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on micro:bit v2 Documentation</title><link>https://microbit.c272.org/</link><description>Recent content in Home on micro:bit v2 Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="https://microbit.c272.org/index.xml" rel="self" type="application/rss+xml"/><item><title>'Hello World' with micro:bit v2</title><link>https://microbit.c272.org/guides/first-microbit-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/first-microbit-project/</guid><description>Now that you&amp;rsquo;ve installed the micro:bit v2 development environment, we can get started on programming a simple micro:bit project. First of all, we should initialise a blank project in a new directory. Let&amp;rsquo;s call it &amp;lsquo;microbit-first-project&amp;rsquo;. This guide assumes the use of micro-tools to manage building and initialising projects outside of the samples directory. If you are not using micro-tools, simply create your project files from within the microbit-v2-samples/source folder.</description></item><item><title>Using MicroBitFileSystem</title><link>https://microbit.c272.org/guides/using-the-filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/using-the-filesystem/</guid><description>New to the micro:bit v2 API, MicroBitFileSystem is a component which allows you to interact with a POSIX-like interface to store &amp;ldquo;files&amp;rdquo; on the micro:bit v2&amp;rsquo;s flash memory, rather than using the older key-value file storage system from micro:bit v1, MicroBitStorage. This guide will discuss how to set up and use a filesystem created through this component, and some example usage for common use cases.
Be very careful if using this API in tandem with the old MicroBitStorage API.</description></item><item><title>Installing on Linux</title><link>https://microbit.c272.org/setup/linux-install-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/linux-install-guide/</guid><description>To get started with micro:bit v2, depending on your distibution of Linux, there are different options available. If you are on a Debian-based distribution or Void Linux (i.e, your distribution has either the apt or xbps package manager), then you can use the micro-tools script-assisted setup method, which will allow you to set up the SDK for building and creating micro:bit v2 projects with a single command. If you are on another distribution, then you will have to follow the manual method for setting up the build environment.</description></item><item><title>Installing on MacOS</title><link>https://microbit.c272.org/setup/mac-install-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/mac-install-guide/</guid><description>This guide is currently a stub. You can help make this guide complete by contributing to this documentation's Github repository.</description></item><item><title>Installing on Windows</title><link>https://microbit.c272.org/setup/windows-install-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/windows-install-guide/</guid><description>There are several available options for installing on Windows-based machines, some of which are easier to work with than others. Those methods are:
Native install Installation through MSYS2/MinGW Installation through Windows Subsystem for Linux (WSL2) Native install comes with the benefit of not requiring any additional abstraction layers or components on the system, however comes with the downside of not being compatible with all the Linux-oriented tooling made available by micro-tools.</description></item><item><title>Configuring &amp; Using micro-tools</title><link>https://microbit.c272.org/setup/using-micro-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/using-micro-tools/</guid><description>If you installed the micro:bit v2 build environment through a method other than the script-assisted setup, you will not have had micro-tools installed in the setup process. In addition, the default micro:bit v2 build environment only permits you to build code from within the sample repository&amp;rsquo;s &amp;ldquo;source&amp;rdquo; directory, which can be limiting when programming multiple micro:bit projects at once. With these things in mind, micro-tools allows you to remove these restrictions, as well as adding a suite of useful utilities for working with micro:bit v2 projects.</description></item><item><title>Setting up a Debug Environment</title><link>https://microbit.c272.org/setup/debug-setup-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/debug-setup-guide/</guid><description>The micro:bit v2 supports debugging over its provided programming port, allowing you to view the contents of memory and control the stepping of execution at runtime. To access this functionality, we will use Visual Studio Code with the marus25.cortex-debug extension, along with one of OpenOCD or pyOCD to provide debugging interaction with the micro:bit v2&amp;rsquo;s Cortex M0 (nRF51822) CPU. The selection of these should largely not matter, as they both provide sufficient debugging support for the extension that will interact with them.</description></item></channel></rss>