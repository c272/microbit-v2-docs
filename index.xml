<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on micro:bit v2 Documentation</title><link>https://microbit.c272.org/</link><description>Recent content in Home on micro:bit v2 Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="https://microbit.c272.org/index.xml" rel="self" type="application/rss+xml"/><item><title>'Hello World' with micro:bit v2</title><link>https://microbit.c272.org/guides/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/hello-world/</guid><description>Now that you&amp;rsquo;ve installed the micro:bit v2 development environment, we can get started on programming a simple micro:bit project. First of all, we should initialise a blank project in a new directory. Let&amp;rsquo;s call it &amp;lsquo;microbit-first-project&amp;rsquo;. This guide assumes the use of micro-tools to manage building and initialising projects outside of the samples directory. If you are not using micro-tools, simply create your project files from within the microbit-v2-samples/source folder.</description></item><item><title>MicroBit</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbit/</guid><description>Represents the micro:bit v2 in its entirety. Allows for convenient access to device drivers to control the micro:bit&amp;rsquo;s various hardware elements.</description></item><item><title>Accelerometer</title><link>https://microbit.c272.org/api-reference/core/accelerometer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/accelerometer/</guid><description>CODAL&amp;rsquo;s accelerometer abstraction class. Allows for reading of the micro:bit&amp;rsquo;s built in accelerometer data, as well as the configuration of the sample rate and range.</description></item><item><title>Button</title><link>https://microbit.c272.org/api-reference/core/button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/button/</guid><description>Represents a single hardware button. Allows for button press event tracking.</description></item><item><title>Compass</title><link>https://microbit.c272.org/api-reference/core/compass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/compass/</guid><description>A compass abstraction. Reads the magnetometer to determine the orientation of the device, applying tilt compensation from data provided by the accelerometer.</description></item><item><title>CoordinateSpace</title><link>https://microbit.c272.org/api-reference/core/coordinatespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/coordinatespace/</guid><description>Representation of a coordinate space, for easy transformations in 3D space related abstractions.</description></item><item><title>KeyValueStorage</title><link>https://microbit.c272.org/api-reference/core/keyvaluestorage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/keyvaluestorage/</guid><description>A simple key-value storage medium implemented with flash as the backing store. Utilises an in-memory scratch buffer.</description></item><item><title>LEDMatrix</title><link>https://microbit.c272.org/api-reference/core/ledmatrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/ledmatrix/</guid><description>A software representation of an LED matrix, also used to represent the micro:bit&amp;rsquo;s LED display.</description></item><item><title>ManagedBuffer</title><link>https://microbit.c272.org/api-reference/core/managedbuffer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/managedbuffer/</guid><description>A mutable reference counted byte buffer, for general purpose use.</description></item><item><title>ManagedString</title><link>https://microbit.c272.org/api-reference/core/managedstring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/managedstring/</guid><description>A copy assignable, immutable string class implemented using basic reference counting.</description></item><item><title>MessageBus</title><link>https://microbit.c272.org/api-reference/core/messagebus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/messagebus/</guid><description>A lightweight message bus implementation, with asynchronous event handling using the fiber scheduler.</description></item><item><title>MicroBitAudio</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitaudio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitaudio/</guid><description>The audio API for micro:bit v2. Allows for multi-stream audio playback with a basic mixer, in addition to synthesiser support for small sound bytes.</description></item><item><title>MicroBitBLEManager</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitblemanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitblemanager/</guid><description>Bluetooth low energy stack manager for the micro:bit&amp;rsquo;s BLE. Must be enabled at compile to be included in CODAL builds.</description></item><item><title>MicroBitCompassCalibrator</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitcompasscalibrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitcompasscalibrator/</guid><description>A compass calibration class for CODAL&amp;rsquo;s compass abstraction on the micro:bit.</description></item><item><title>MicroBitDisplay</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitdisplay/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitdisplay/</guid><description>An abstraction layer over the micro:bit&amp;rsquo;s &amp;lsquo;display&amp;rsquo; (LED matrix), allowing for string display and animated images.</description></item><item><title>MicroBitI2C</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbiti2c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbiti2c/</guid><description>I2C protocol wrapper for the micro:bit. Allows for creating I2C channels over provided NRF52 pins.</description></item><item><title>MicroBitIO</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitio/</guid><description>Container for representations of all the micro:bit&amp;rsquo;s pins as NRF52 pin instances.</description></item><item><title>MicroBitLog</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitlog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitlog/</guid><description>A simple logging API for the micro:bit, which enables generated results to be viewed easily from an external PC.</description></item><item><title>MicroBitPowerManager</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitpowermanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitpowermanager/</guid><description>Power management interface for the micro:bit. Holds information on power usage, as well as functions for working with deep sleep modes.</description></item><item><title>MicroBitRadio</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitradio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitradio/</guid><description>A radio abstraction for the micro:bit. Contains functions for sending and receiving data over a set of radio bands, with buffering support.</description></item><item><title>MicroBitThermometer</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitthermometer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitthermometer/</guid><description>A pseudo-thermometer for the micro:bit v2. Infers the ambient temperature based on the surface temperature readings of various chips on the micro:bit.</description></item><item><title>MicroBitUSBFlashManager</title><link>https://microbit.c272.org/api-reference/microbit-v2/microbitusbflashmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/microbitusbflashmanager/</guid><description>An abstraction for managing the micro:bit&amp;rsquo;s USB interface and corresponding flash.</description></item><item><title>MultiButton</title><link>https://microbit.c272.org/api-reference/core/multibutton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/multibutton/</guid><description>Represents a multi-button group, which can then be detected as a single press event.</description></item><item><title>NRF52ADC</title><link>https://microbit.c272.org/api-reference/nrf52/nrf52adc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/nrf52/nrf52adc/</guid><description>A DMA-enabled analogue to digital converter abstraction, supporting the use of multiplexed DMA/ADC channels.</description></item><item><title>NRF52FlashManager</title><link>https://microbit.c272.org/api-reference/nrf52/nrf52flashmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/nrf52/nrf52flashmanager/</guid><description>Interface which provides functions for reading and writing arbitrary portions of attached flash memory. Also provides page and size information.</description></item><item><title>NRF52Pin</title><link>https://microbit.c272.org/api-reference/nrf52/nrf52pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/nrf52/nrf52pin/</guid><description>Software abstraction of a single pin available to an NRF52 processor. Supports digital and analogue read/write.</description></item><item><title>NRF52Serial</title><link>https://microbit.c272.org/api-reference/nrf52/nrf52serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/nrf52/nrf52serial/</guid><description>An interface for performing serial over pins on the NRF52, integrated with the CODAL event system.</description></item><item><title>NRF52TouchSensor</title><link>https://microbit.c272.org/api-reference/nrf52/nrf52touchsensor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/nrf52/nrf52touchsensor/</guid><description>A capacitive touch sensor watch class, driven by a low level NRF52 timer. Allows for touch capacitive pins being driven high when pressed.</description></item><item><title>NRFLowLevelTimer</title><link>https://microbit.c272.org/api-reference/nrf52/nrflowleveltimer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/nrf52/nrflowleveltimer/</guid><description>CODAL abstraction for hardware timers available to NRF52 processors.</description></item><item><title>NVMController</title><link>https://microbit.c272.org/api-reference/core/nvmcontroller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/nvmcontroller/</guid><description>A generic interface to represent non volatile memory controllers.</description></item><item><title>Pin</title><link>https://microbit.c272.org/api-reference/core/pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/pin/</guid><description>Abstraction for a simple generic pin, with ability for handling both digital and analogue I/O.</description></item><item><title>Sample3D</title><link>https://microbit.c272.org/api-reference/core/sample3d/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/sample3d/</guid><description>A three dimensional vector representing sample data retrieved from a 3D abstraction.</description></item><item><title>Timer</title><link>https://microbit.c272.org/api-reference/core/timer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/timer/</guid><description>A low level timer abstraction, adding integration with the CODAL message bus event system.</description></item><item><title>TouchButton</title><link>https://microbit.c272.org/api-reference/core/touchbutton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/touchbutton/</guid><description>Represents a button triggered by capacitive touch. Can be hooked for press events.</description></item><item><title>Using the micro:bit file system</title><link>https://microbit.c272.org/guides/using-the-filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/using-the-filesystem/</guid><description>New to the micro:bit v2 API, MicroBitFileSystem is a component which allows you to interact with a POSIX-like interface to store &amp;ldquo;files&amp;rdquo; on the micro:bit v2&amp;rsquo;s flash memory, rather than using the older key-value file storage system from micro:bit v1, MicroBitStorage. This guide will discuss how to set up and use a filesystem created through this component, and some example usage for common use cases.
Be very careful if using this API in tandem with the old MicroBitStorage API.</description></item><item><title>Logging with MicroBitLog</title><link>https://microbit.c272.org/guides/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/logging/</guid><description>If your use case for the micro:bit v2 includes logging data from sensors and other event sources, then you may be tempted to use the MicroBitFileSystem or KeyValueStorage to store your log data for later retrieval from the micro:bit file system. However, new to micro:bit v2, there is an API designed specifically for logging: MicroBitLog. Use of this API allows you to store data in a table-like format, containing rows of field-value pairs, providing a handy web interface to view your results data by loading your micro:bit v2&amp;rsquo;s file system from a PC.</description></item><item><title>Interacting over serial I/O</title><link>https://microbit.c272.org/guides/serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/guides/serial/</guid><description>The micro:bit API allows you to transfer information out from the board to external machines (and other micro:bits!) in various ways. One of these is through the use of serial transmission, which has been a feature of the API since micro:bit v1, with only a few very minor breaking name changes carrying over into the v2 API. This guide will discuss how to set up a serial connection over the USB UART port on the micro:bit, and communicate with an external machine (for the purposes of this exercise, this will be a Linux computer).</description></item><item><title>Installing on Linux</title><link>https://microbit.c272.org/setup/linux-install-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/linux-install-guide/</guid><description>To get started with micro:bit v2, depending on your distibution of Linux, there are different options available. If you are on a Debian-based distribution or Void Linux (i.e, your distribution has either the apt or xbps package manager), then you can use the micro-tools script-assisted setup method, which will allow you to set up the SDK for building and creating micro:bit v2 projects with a single command. If you are on another distribution, then you will have to follow the manual method for setting up the build environment.</description></item><item><title>Installing on MacOS</title><link>https://microbit.c272.org/setup/mac-install-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/mac-install-guide/</guid><description>To get started with micro:bit v2 on MacOS, you can either use the micro-tools script-assisted setup method, which will allow you to set up the SDK for building and creating micro:bit v2 projects with a single command, or you can do everything manually by installing the required dependencies and cloning the samples repository by hand.
Script-assisted Setup For automatic setup, we will use microinstall.sh from the c272/micro-tools repository. This repository contains many useful tools for building and configuring build environments for micro:bit v2 projects, and is a companion project to this documentation.</description></item><item><title>Installing on Windows</title><link>https://microbit.c272.org/setup/windows-install-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/windows-install-guide/</guid><description>There are several available options for installing on Windows-based machines, some of which are easier to work with than others. Those methods are:
Native install Installation through MSYS2/MinGW Installation through Windows Subsystem for Linux (WSL2) Native install comes with the benefit of not requiring any additional abstraction layers or components on the system, however comes with the downside of not being compatible with all the Linux-oriented tooling made available by micro-tools.</description></item><item><title>Configuring &amp; Using micro-tools</title><link>https://microbit.c272.org/setup/using-micro-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/using-micro-tools/</guid><description>If you installed the micro:bit v2 build environment through a method other than the script-assisted setup, you will not have had micro-tools installed in the setup process. In addition, the default micro:bit v2 build environment only permits you to build code from within the sample repository&amp;rsquo;s &amp;ldquo;source&amp;rdquo; directory, which can be limiting when programming multiple micro:bit projects at once. With these things in mind, micro-tools allows you to remove these restrictions, as well as adding a suite of useful utilities for working with micro:bit v2 projects.</description></item><item><title>Setting up a Debug Environment</title><link>https://microbit.c272.org/setup/debug-setup-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/setup/debug-setup-guide/</guid><description>The micro:bit v2 supports debugging over its provided programming port, allowing you to view the contents of memory and control the stepping of execution at runtime. To access this functionality, we will use Visual Studio Code with the marus25.cortex-debug extension, along with one of OpenOCD or pyOCD to provide debugging interaction with the micro:bit v2&amp;rsquo;s Cortex M0 (nRF51822) CPU. The selection of these should largely not matter, as they both provide sufficient debugging support for the extension that will interact with them.</description></item><item><title>License &amp; Attribution</title><link>https://microbit.c272.org/api-reference/core/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/core/license/</guid><description>Licensing and attribution information for the &amp;lsquo;codal-core&amp;rsquo; documentation.&lt;br>&lt;br></description></item><item><title>License &amp; Attribution</title><link>https://microbit.c272.org/api-reference/microbit-v2/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/microbit-v2/license/</guid><description>Licensing and attribution information for the &amp;lsquo;codal-microbit-v2&amp;rsquo; documentation.&lt;br>&lt;br></description></item><item><title>License &amp; Attribution</title><link>https://microbit.c272.org/api-reference/nrf52/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://microbit.c272.org/api-reference/nrf52/license/</guid><description>Licensing and attribution information for the &amp;lsquo;codal-nrf52&amp;rsquo; documentation.&lt;br>&lt;br></description></item></channel></rss>